# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
# first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28

#We can see that 28 is the first triangle number to have over five divisors.

#What is the value of the first triangle number to have over five hundred divisors?

stime = Time.now.to_f

divisors = Array.new
i = 1
triangle_number = i

def is_square(n)
  (Math.sqrt(n).floor)**2 == n
end

def fermat_factor(n)
  factors = [1,n].uniq
  ((Math.sqrt(n).ceil)..n).each do |x|
    y_squared = x * x - n
    if is_square(y_squared)
      y = Math.sqrt(y_squared).to_i
      s = (x - y).to_i
      t = (x + y).to_i
      if s != 1 && s != n
        factors = (factors + [s, t]).uniq
      end
    end
  end
  factors.sort
end

def factor(n)
  if n < 1
    nil
  elsif n == 1
    [1]
  else
    factors = [1]
    (2..n).each do |i|
      factors = factors << i if n % i == 0
    end
    factors
  end
end

while divisors.size < 500
  divisors = factor(triangle_number)
  i = i + 1
  triangle_number = triangle_number + i
# puts "i = #{i}, triangle number = #{triangle_number}, divisors = #{divisors}"
end
ftime = Time.now.to_f

puts "The value of the first triangle number to have over five hundred divisors is #{i}."
puts "Calculated in #{(ftime - stime)} sec."
